module.prometheus.docker_image.prometheus: Refreshing state... [id=sha256:b2eba626505c99c2621ba0d846f1f0bbfb23cd8fb35f30ab8c54709218d59746custom-prometheus:latest]
module.grafana.docker_image.grafana: Refreshing state... [id=sha256:8c7e4042cd999b918ea441f3134b59929d81f58167b11c5158a0c863ae082c65grafana/grafana:latest]
module.prometheus.docker_container.prometheus: Refreshing state... [id=8f95563c3c1eb801a93c984a1895ef256f236b78689d0249d0f2d35d802c9a4a]
module.grafana.docker_container.grafana: Refreshing state... [id=02be09eb099d1ab27fd02e5a5cfd23f4ef910dc895852655d2d78d3dfaee5ff3]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
-/+ destroy and then create replacement

Terraform will perform the following actions:

  # module.grafana.docker_container.grafana must be replaced
-/+ resource "docker_container" "grafana" {
      + bridge                                      = (known after apply)
      ~ command                                     = [] -> (known after apply)
      + container_logs                              = (known after apply)
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      ~ entrypoint                                  = [
          - "/run.sh",
        ] -> (known after apply)
      + exit_code                                   = (known after apply)
      - group_add                                   = [] -> null
      ~ hostname                                    = "02be09eb099d" -> (known after apply)
      ~ id                                          = "02be09eb099d1ab27fd02e5a5cfd23f4ef910dc895852655d2d78d3dfaee5ff3" -> (known after apply)
      ~ init                                        = false -> (known after apply)
      ~ ipc_mode                                    = "private" -> (known after apply)
      ~ log_driver                                  = "json-file" -> (known after apply)
      - log_opts                                    = {} -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
        name                                        = "grafana"
      ~ network_data                                = [
          - {
              - gateway                   = "192.168.49.1"
              - global_ipv6_prefix_length = 0
              - ip_address                = "192.168.49.3"
              - ip_prefix_length          = 24
              - mac_address               = "02:42:c0:a8:31:03"
              - network_name              = "minikube"
                # (2 unchanged attributes hidden)
            },
        ] -> (known after apply)
      - network_mode                                = "bridge" -> null # forces replacement
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      ~ runtime                                     = "runc" -> (known after apply)
      ~ security_opts                               = [] -> (known after apply)
      ~ shm_size                                    = 64 -> (known after apply)
      + stop_signal                                 = (known after apply)
      ~ stop_timeout                                = 0 -> (known after apply)
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - user                                        = "472" -> null
      - working_dir                                 = "/usr/share/grafana" -> null
        # (19 unchanged attributes hidden)

      ~ healthcheck (known after apply)

      ~ labels (known after apply)

      - volumes {
          - container_path = "/etc/grafana/provisioning" -> null
          - host_path      = "/workspace/grafana/provisioning" -> null
          - read_only      = false -> null
            # (2 unchanged attributes hidden)
        }
      + volumes {
          + container_path = "/etc/grafana/provisioning"
          + host_path      = "/workspace/grafana/provisioning"
            # (2 unchanged attributes hidden)
        }

        # (2 unchanged blocks hidden)
    }

  # module.prometheus.docker_container.prometheus must be replaced
-/+ resource "docker_container" "prometheus" {
      + bridge                                      = (known after apply)
      ~ command                                     = [
          - "--config.file=/etc/prometheus/prometheus.yml",
          - "--storage.tsdb.path=/prometheus",
        ] -> (known after apply)
      + container_logs                              = (known after apply)
      - cpu_shares                                  = 0 -> null
      - dns                                         = [] -> null
      - dns_opts                                    = [] -> null
      - dns_search                                  = [] -> null
      ~ entrypoint                                  = [
          - "/bin/prometheus",
        ] -> (known after apply)
      ~ env                                         = [] -> (known after apply)
      + exit_code                                   = (known after apply)
      - group_add                                   = [] -> null
      ~ hostname                                    = "8f95563c3c1e" -> (known after apply)
      ~ id                                          = "8f95563c3c1eb801a93c984a1895ef256f236b78689d0249d0f2d35d802c9a4a" -> (known after apply)
      ~ init                                        = false -> (known after apply)
      ~ ipc_mode                                    = "private" -> (known after apply)
      ~ log_driver                                  = "json-file" -> (known after apply)
      - log_opts                                    = {} -> null
      - max_retry_count                             = 0 -> null
      - memory                                      = 0 -> null
      - memory_swap                                 = 0 -> null
        name                                        = "prometheus"
      ~ network_data                                = [
          - {
              - gateway                   = "192.168.49.1"
              - global_ipv6_prefix_length = 0
              - ip_address                = "192.168.49.4"
              - ip_prefix_length          = 24
              - mac_address               = "02:42:c0:a8:31:04"
              - network_name              = "minikube"
                # (2 unchanged attributes hidden)
            },
        ] -> (known after apply)
      - network_mode                                = "bridge" -> null # forces replacement
      - privileged                                  = false -> null
      - publish_all_ports                           = false -> null
      ~ runtime                                     = "runc" -> (known after apply)
      ~ security_opts                               = [] -> (known after apply)
      ~ shm_size                                    = 64 -> (known after apply)
      + stop_signal                                 = (known after apply)
      ~ stop_timeout                                = 0 -> (known after apply)
      - storage_opts                                = {} -> null
      - sysctls                                     = {} -> null
      - tmpfs                                       = {} -> null
      - user                                        = "nobody" -> null
      - working_dir                                 = "/prometheus" -> null
        # (18 unchanged attributes hidden)

      ~ healthcheck (known after apply)

      ~ labels (known after apply)

        # (2 unchanged blocks hidden)
    }

  # module.runner.docker_container.runner will be created
  + resource "docker_container" "runner" {
      + attach                                      = false
      + bridge                                      = (known after apply)
      + command                                     = (known after apply)
      + container_logs                              = (known after apply)
      + container_read_refresh_timeout_milliseconds = 15000
      + entrypoint                                  = (known after apply)
      + env                                         = (sensitive value)
      + exit_code                                   = (known after apply)
      + hostname                                    = (known after apply)
      + id                                          = (known after apply)
      + image                                       = (known after apply)
      + init                                        = (known after apply)
      + ipc_mode                                    = (known after apply)
      + log_driver                                  = (known after apply)
      + logs                                        = false
      + must_run                                    = true
      + name                                        = "runner"
      + network_data                                = (known after apply)
      + read_only                                   = false
      + remove_volumes                              = true
      + restart                                     = "no"
      + rm                                          = false
      + runtime                                     = (known after apply)
      + security_opts                               = (known after apply)
      + shm_size                                    = (known after apply)
      + start                                       = true
      + stdin_open                                  = false
      + stop_signal                                 = (known after apply)
      + stop_timeout                                = (known after apply)
      + tty                                         = false
      + wait                                        = false
      + wait_timeout                                = 60

      + healthcheck (known after apply)

      + labels (known after apply)

      + networks_advanced {
          + aliases      = []
          + name         = "minikube"
            # (2 unchanged attributes hidden)
        }
    }

  # module.runner.docker_image.runner will be created
  + resource "docker_image" "runner" {
      + id          = (known after apply)
      + image_id    = (known after apply)
      + name        = "runner:latest"
      + repo_digest = (known after apply)

      + build {
          + cache_from     = []
          + context        = "./modules/runner"
          + dockerfile     = "Dockerfile"
          + extra_hosts    = []
          + no_cache       = true
          + remove         = true
          + security_opt   = []
          + tag            = []
            # (11 unchanged attributes hidden)
        }
    }

Plan: 4 to add, 0 to change, 2 to destroy.
module.prometheus.docker_container.prometheus: Destroying... [id=8f95563c3c1eb801a93c984a1895ef256f236b78689d0249d0f2d35d802c9a4a]
module.grafana.docker_container.grafana: Destroying... [id=02be09eb099d1ab27fd02e5a5cfd23f4ef910dc895852655d2d78d3dfaee5ff3]
module.runner.docker_image.runner: Creating...
module.prometheus.docker_container.prometheus: Destruction complete after 2s
module.grafana.docker_container.grafana: Destruction complete after 2s
module.prometheus.docker_container.prometheus: Creating...
module.grafana.docker_container.grafana: Creating...
module.grafana.docker_container.grafana: Creation complete after 3s [id=aa106f56d387839f49c1c81c17540b73e5e644fa7b9463778ee07db7c6a6e21d]
module.prometheus.docker_container.prometheus: Creation complete after 3s [id=d44f631d2eb50de6b11bfb96ddaacc16c2df3a63f303e45b338ff62ba9563fee]
module.runner.docker_image.runner: Still creating... [10s elapsed]
